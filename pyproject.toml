# https://packaging.python.org/en/latest/specifications/pyproject-toml/
[build-system]
requires = ["pdm-backend", "wheel>=0.42"]
build-backend = "pdm.backend"

[project]
name = "pymediainfo"
description = "A Python wrapper for the MediaInfo library."
authors = [
    {name = "Louis Sautier", email = "sautier.louis@gmail.com"},
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version"]
requires-python = ">=3.9"
dependencies = []

[project.optional-dependencies]
tests = [
    "pytest>=6",
    "pytest-cov",
    "pytest-xdist",
]
docs = [
    "alabaster",
    "myst-parser",
    "sphinx",
]
dev = [
    "pre-commit",
    "ipython",
    "ruff",
    "mypy>=1.0",
]

[project.urls]
Homepage = "https://github.com/sbraz/pymediainfo"
Documentation = "https://pymediainfo.readthedocs.io/"
Bugs = "https://github.com/sbraz/pymediainfo/issues"


# https://pdm-project.org/latest/
[tool.pdm.version]
source = "scm"

[tool.pdm.dev-dependencies]
download_library = ["wheel>=0.44", "requests"]

[tool.pdm.build]
source-includes = ["docs/", "scripts/", "tests/"]

[tool.pdm.scripts.types]
help = "Check type hints"
cmd = "mypy --install-types --non-interactive --config-file=pyproject.toml {args:src tests}"

[tool.pdm.scripts.docs]
help = "Build and test documentation"
composite = [
  "sphinx-build -W --keep-going --color -b html docs docs/_build",
  "sphinx-build -W --keep-going --color -b linkcheck docs docs/_build",
]

[tool.pdm.scripts.test-nocov]
help = "Run tests without coverage"
cmd = "pytest {args:-n auto}"

[tool.pdm.scripts.test]
help = "Run tests with coverage"
cmd = "pytest --cov --cov-report=term-missing --cov-config=pyproject.toml {args:-n auto}"

[tool.pdm.scripts.download_library]
help = "Download mediainfo library"
cmd = "python scripts/download_library.py {args:-c --auto}"

[tool.pdm.scripts.clean_library]
help = "Clean mediainfo library"
cmd = "python scripts/download_library.py -c"

[tool.pdm.scripts.tag_wheel]
help = "Tag the wheels for a specific platform"
cmd = "python scripts/tag_pure_wheels.py"

[tool.pdm.scripts.build_linux_x86_64]
help = "Build wheel with bundled library for Linux x86_64"
composite = [
  "download_library -c -p linux -a x86_64",
  "pdm build -v --no-sdist",
  "tag_wheel manylinux_2_27_x86_64",
]

[tool.pdm.scripts.build_linux_arm64]
help = "Build wheel with bundled library for Linux arm64"
composite = [
  "download_library -c -p linux -a arm64",
  "pdm build -v --no-sdist",
  "tag_wheel manylinux_2_27_aarch64",
]

[tool.pdm.scripts.build_win32_x86_64]
help = "Build wheel with bundled library for Windows x64"
composite = [
  "download_library -c -p win32 -a x86_64",
  "pdm build -v --no-sdist",
  "tag_wheel win_amd64",
]

[tool.pdm.scripts.build_win32_i386]
help = "Build wheel with bundled library for Windows x32"
composite = [
  "download_library -c -p win32 -a i386",
  "pdm build -v --no-sdist",
  "tag_wheel win32",
]

[tool.pdm.scripts.build_darwin]
help = "Build wheel with bundled library for MacOS x86_64 and arm64"
composite = [
  # -a doesn't matter as the file works with both x86_64 and arm64 (Mac_x86_64+arm64.tar.bz2)
  "download_library -c -p darwin -a arm64",
  "pdm build -v --no-sdist",
  "tag_wheel macosx_10_10_universal2",
]

[tool.pdm.scripts.build_all]
help = "Build all the wheels with bundled library and the sdist and wheel without library"
composite = [
  "build_linux_arm64",
  "build_linux_x86_64",
  "build_win32_x86_64",
  "build_win32_i386",
  "build_darwin",
  # remove any library before building sdist and barebone wheel
  "clean_library",
  "pdm build",
]


# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
# global-only flags
pretty = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["pymediainfo.*"]
strict = true


# https://docs.pytest.org/en/latest/reference/customize.html
[tool.pytest.ini_options]
addopts = "-vv -r a"


# https://coverage.readthedocs.io/en/stable/
[tool.coverage.run]
source_pkgs = ["pymediainfo", "tests"]
branch = true
parallel = true
omit = [
  "src/pymediainfo/_version.py",
]

[tool.coverage.paths]
pymediainfo = ["src/pymediainfo", "*/pymediainfo/src/pymediainfo"]
tests = ["tests", "*/pymediainfo/tests"]

[tool.coverage.report]
exclude_also = [
  "# pragma: no.cover",
  "# pragma: no.branch",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


# https://docs.astral.sh/ruff/
[tool.ruff]
line-length = 100
src = ["src", "tests", "scripts", "docs"]
exclude = [
    "tests/data/*",
    "_version.py",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ISC001",  # conflict with `ruff format`
    "D203",    # pydocstyle
    "D105",
    "D107",
    "N802",    # pep8-naming
    "N803",
    "N806",
    "ANN101",
    "ANN102",
    "ANN401",  # flake8-annotations
    "ERA001",  # eradicate
    "G004",    # flake8-logging-format
    "TD",      # flake8-todos
    "COM812",  # flake8-commas
    "PTH123",  # flake8-use-pathlib
    "SIM103",  # flake8-simplify
    "PLR0913", # pylint
    "PLR2004",
    "PLR0912", # refactor
    "PLR0915",
    "PERF203", # Perflint
    "PD901",   # pandas-vet
    ### to be removed
    "C901",    # mccabe
]
unfixable = [
    "T201",
    "T203",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "D104"]
"**/tests/*" = [
    "D",
    "S",
    "RUF012",
    "N999",
    "E402",
    "INP001",
    "PTH",
    "T201",
    "ANN",
    "SLF",
    "FBT",
]
"**/scripts/*" = ["INP001"]
"**/docs/*" = [
    "A001",
    "D100",
    "INP001",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true


# https://github.com/crate-ci/typos/blob/master/docs/reference.md
[tool.typos.default]
extend-ignore-re = [
    "(?Rm)^.*#\\s*spellchecker:\\s*disable-line$",
    "#\\s*spellchecker:off\\s*\\n.*\\n\\s*#\\s*spellchecker:on"
]
